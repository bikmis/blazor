@page "/communication"

@layout EmployeeLayout
@attribute [Authorize(Roles = "admin")]

<h3>Communication among Components and Pages</h3>


<table class="table table-striped">
    <thead>
        <tr>
            <th>S.N.</th>
            <th>From and To</th>
            <th>Description</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td>1</td>
            <td>
                From parent component to child component <br />
                ([parameter] attribute)
            </td>
            <td>
                Child component will expose a property with [parameter] attribute. <br />
                child component: <br />
                <code style="color: red">
                    [parameter] <br />
                    public string Name {get;set;} <br />
                    &lt;div>@@Name&lt;/div> (in the razor view)
                </code>
                <br />
                <br />
                parent component: <br />
                <code style="color:red">
                    private string name {get; set;} <br />
                    &lt;child Name="@@name"/>
                </code>
            </td>
        </tr>
        <tr>
            <td>2</td>
            <td>
                From parent component to child component <br />
                (@@ref references child component's element')
            </td>
            <td>
                Child component will expose properties with public access modifier. <br />
                child component: <br />
                <code style="color: red">
                    public string DoSomething() <br />
                    { return "did something." }
                </code>
                <br />
                <br />
                parent component: <br />
                <code style="color:red">
                    private ChildOne childOne; <br />
                    &lt;button @@onclick="() => childOne.doSomething()">Do Something&lt;/button> <br />
                    &lt;ChildOne @@ref="childOne"/>
                </code>
            </td>
        </tr>
        <tr>
            <td>3</td>
            <td>
                From child component to parent component <br />
                (EventCallback)
            </td>
            <td>
                Child component will expose a property with EventCallback. <br />
                child component: <br />
                <code style="color:red">
                    public EventCallback&lt;string> OnSaved {get; set;} <br />
                    &lt;button @@onclick="@@(()=> OnSaved.InvokeAsync("The record is saved."))">Save&lt;/button>
                </code>
                <br />
                <br />
                parent component: <br />
                <code style="color:red">
                    private string message {get; set;} <br />
                    private void save(string msg){ <br />
                    &emsp; message = msg; <br />
                    } <br />
                    &lt;child OnSaved="save" />
                </code>
            </td>
        </tr>
        <tr>
            <td>4</td>
            <td>
                From one page to another page <br />
                (path parameter: /users/{id})
            </td>
            <td>
                public parameter Id is automatically assigned to the value coming frm Url path parameter. <br />
                <code style="color:red">
                    [Parameter] <br />
                    public string Id {get; set;} <br />
                    &lt;div>@@Id&lt;/div>
                </code>
            </td>
        </tr>
        <tr>
            <td>5</td>
            <td>
                From one page to another page <br />
                (query parameter(string): /users?role=admin&position=manager)
            </td>
            <td>
                You can parse the url and get values of role and position any time (during the component initialization (OnInitializedAsync) or afterwards)
            </td>
        </tr>
        <tr>
            <td>6</td>
            <td>
                From child to parent component <br />
                From parent to child component <br />
                From one sibling to another sibling component <br />
                From one page to another page <br />
                (app state (state container) service)
            </td>
            <td>
                Create an app state service and inject it wherever you need it.
            </td>
        </tr>
        <tr>
            <td>7</td>
            <td>
                From child to parent component <br />
                From parent to child component <br />
                From one sibling to another sibling component <br />
                From one page to another page <br />
                (cascading app state component)
            </td>
            <td>
                Create a cascading app state razor component (such as CascadingAppState) using CascadingValue component and wrap App.razor with &lt;CascadingAppState>&lt;/CascadingAppState> <br />
                <code style="color:red">
                    &lt;CascadingAppState> <br />
                    &emsp; &lt;Router> <br />
                    &emsp;&emsp; .... <br />
                    &emsp; &lt;/Router> <br />
                    &lt;/CascadingAppState>
                </code>
                <br />
                Wherever you need properties from CascadingAppState, do the following with cascading parameter attribute: <br />
                <code style="color:red">[CascadingParameter] public CascadingAppState AppState {get; set;}</code>
            </td>
        </tr>
    </tbody>
</table>




@code {

}
