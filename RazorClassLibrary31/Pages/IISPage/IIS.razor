@page "/iis"

@layout EmployeeLayout

@attribute [Authorize]


<h3>.Net Core 3.1 Blazor Client Deplployment to IIS</h3>
<br />
<ul>
    <li>
        Install dotnet-hosting-3.1.15-win.exe from <a href="https://dotnet.microsoft.com/download/dotnet/3.1" target="_blank">Windows Hosting Bundle</a>. This is required
        for Blazor deployment to IIS.
    </li>
    <li>
        Right click on Blazor project and open properties. Create the following: <br />
        Profile: IIS <br />
        Launch: IIS <br />
        Launch browser: check without any value in the text box <br />
        App URL: http://localhost:8090 (in launchSettings.json add 8080 at sslPort)
    </li>
    <li>
        Open IIS and create a web site. Point to the Blazor project directory and create the following two bindings: http with 8090 port and https with 8080 port. 
        Authentication should be Anonymous Authentication with Anonymous user identity set to Application pool identity. Go to Application Pools and start
        BlazorClientApp. Right-click on the website BlazorClientApp and Edit Permissions - Security - Edit - Add IIS AppPool\BlazorClientApp and click Ok.
    </li>
    <li>
        web.config file is created when we deploy a Blazor application to IIS.
    </li>
</ul>
<br />

<h3>.Net Core 3.1 Web API Deployment to IIS in VS 2019 For Debugging</h3>

During deveopment using IIS is better than IIS Express as IIS is where we deploy our production code. IIS is more like the production server than IIS Express.

<ul>
    <li>
        Open IIS. Right click on Sites and Add Website. Site name: EmployeeResource, Application pool: EmployeeResource, Physical path: C:\Users\Bikash\source\repos\blazor\EmployeeWebAPI,
        Port 8082, Type: https, SSL Certificate: IIS Express Development Certificate, Port 8092, Type: http <br /> <br />
        Note: Physical path is the project folder so that we can debug the application in Visual Studio 2019, both protocols (http and https) are set up.
    </li>
    <li>
        Click on the website in IIS, double click on Authentication and Edit Anonymous Authentication by setting Anonymous user identity to Application pool identity.
    </li>
    <li>
        Start EmployeeResource in Application Pools.
    </li>
    <li>
        Provide user "IIS AppPool\EmployeeResource" access to the the website EmployeeResource (project C:\Users\Bikash\source\repos\blazor\EmployeeWebAPI) by right clicking
        on the website, click on Edit Permissions -> Security -> Edit -> Add -> Enter "IIS AppPool\EmployeeResource" and click on Check Names, then click on OK. <br />
        <img src="_content/Intel.EmployeeManagement.RazorClassLibrary/images/security_edit.png" />
    </li>
    <li>
        Provide user "IIS AppPool\EmployeeResource" access to EmployeeDb via ssms. Expand root level Security -> Logins and create a login "IIS APPPOOL\EmployeeResource" with Server Role "public".
        Create a User "IIS APPPOOL\EmployeeResource" in Users folder inside Security under EmployeeDb database. This user can have Membership "db_datareader" and "db_datawriter" <br />
        <img src="_content/Intel.EmployeeManagement.RazorClassLibrary/images/apppool_user_in_database.png"/>
    </li>
    <li>
        For "Delete" and "Put" http verbs to work via IIS, delete WebDAVModule from EmployeeResource -> Modules in IIS. If you need to restore WebDAVModule or any other module that you have deleted,
        click on "Revert To Parent". "Delete" and "Put" verbs work in IIS Express though, but not in IIS without deleting WebDAVModule from the website. When you delete WebDAVModule, web.config
        will change as below: <br />
        &lt;webServer> <br />
        &nbsp;&nbsp;&lt;modules> <br />
        &nbsp;&nbsp;&nbsp;&nbsp;&lt;remove name="WebDAVModule" /> <br />
        &nbsp;&nbsp;&lt;/modules> <br />
        &lt;/system.webServer>
    </li>
    <li>
        Right-click the project Employee Web Api, open Properties and create a profile IIS at Debug and follow the steps below: <br />
        Launch: IIS <br />
        Launch Browser: check without any value <br />
        APP Url: http://localhost:8092 (and sslPort in LaunchSettings is 8082) <br />
        When the application runs, http://localhost:8092 will automatically change to https://localhost:8082 - this change is caused by browser 
        and IIS. If https is available, then http and its port change to https and the related port.
    </li>
</ul>











@code {

}
