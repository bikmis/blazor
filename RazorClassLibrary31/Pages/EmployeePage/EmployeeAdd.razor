@page "/employeeadd"
@layout EmployeeLayout
@attribute [Authorize (Roles = "admin")]
@using Intel.EmployeeManagement.RazorClassLibrary.Helper


<h3>Add Employee</h3>

<EditForm Model="@employee" OnValidSubmit="(e) => addEmployee(e, employee)">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="firstName" class="form-label">First Name</label>
        <InputText class="form-control" id="firstName" @bind-Value="@employee.FirstName" />  @* With <input ..> validation fires when form is submitted. With <InputText ...> validation fires immediately when you click outside the element or tab out.*@
        <ValidationMessage For="()=>employee.FirstName" />
    </div>
    <div class="mb-3">
        <label for="middleName" class="form-label">Middle Name</label>
        <InputText class="form-control" id="middleName" @bind-Value="@employee.MiddleName" />
        <ValidationMessage For="()=> employee.MiddleName" />
    </div>
    <div class="mb-3">
        <label for="lastName" class="form-label">Last Name</label>
        <InputText class="form-control" id="lastName" @bind-Value="@employee.LastName" />
        <ValidationMessage For="()=> employee.LastName" />
    </div>
    <div class="mb-3">
        <label for="dateOfBirth" class="form-label">Date Of Birth</label>
        <InputDate class="form-control" id="dateOfBirth" @bind-Value="@employee.DateOfBirth" />
        <ValidationMessage For="()=> employee.DateOfBirth" />
    </div>
    <div class="mb-3">
        <label for="position" class="form-label">Position</label>
        <InputText class="form-control" id="position" @bind-Value="@employee.Position" />
        <ValidationMessage For="()=> employee.Position" />
    </div>
    <div class="mb-3">
        <label for="departmentID" class="form-label">Department ID</label>
        @*<InputSelect> only accepts string. That's why we created InputSelectNumber class/element'*@
        <InputSelectNumber class="form-control" id="departmentID" @bind-Value="employee.DepartmentID">
            @foreach (var deparment in departments)
            {
                <option value="@deparment.Key">@deparment.Key: @deparment.Value</option>
            }
        </InputSelectNumber>
        <ValidationMessage For="()=> employee.DepartmentID" />
    </div>
    <div class="mb-3">
        <label for="gender" class="form-label">Gender</label>
        <div>
            <label><input type="radio" checked=@(employee.Gender=="M") @onclick=@(() => employee.Gender="M") />&nbsp; Male</label>
            &nbsp;
            <label><input type="radio" checked=@(employee.Gender=="F") @onclick=@(() => employee.Gender="F") />&nbsp; Female</label>
        </div>
        <ValidationMessage For="()=> employee.Gender" />
    </div>



    <button type="button" class="btn btn-secondary" @onclick="resetForm">Reset</button>
    <button type="submit" class="btn btn-primary">Save</button>
</EditForm>


@code {
    
}
